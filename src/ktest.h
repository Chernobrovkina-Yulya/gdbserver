
#define MAX_ELF_IMAGE_SIZE 1024*1024		// максимальный размер исполняемого файла для загрузки

// Строка для ассемблирования
typedef struct {
	uint64_t	addr;		// адрес для размещения инструкции или 0 для записи по текущему IP
	uint64_t	*str;		// паскалевская строка
	uint64_t	opcode;		// полученный опкод
} asm_str;

// описание одного блока оперативной памяти
typedef struct {
	uint64_t	start;		// начальный адрес страницы
	uint64_t	len;		// количество страниц
	uint64_t	*own;		// имя владельца, пока 0, в дальнейших версиях будет использоваться
} mem_block;
// Массив для приема данных о блоках оперативной памяти
// на входе надо правильно заполнить значение n и указатель на o
// на выходе в n будет количество записей с заполненными полями
typedef struct {
	uint64_t	n; 		// количество записей о блоках
	mem_block	b[10];		// память для записи данных о блоках
} mem_blocks;
// массив (тип А) для параметров устанавливаемой/удаляемой точки останова
typedef struct {
	uint64_t	l;		// количество записей в массиве (3|4)
	uint64_t	t1;		// тип данных 1 - число
	uint64_t	a;		// адрес точки останова
	uint64_t	t2;		// тип данных 2 - число
	uint64_t	o;		// опкод в точке останова
	uint64_t	t3;		// тип данных 3 - число
	uint64_t	n;		// внутренний номер точки останова
	uint64_t	t4;		// тип данных 4 - число
	uint64_t	r;		// внутренний код возврата из set_breakpoint (для отладки)
} bp_str;

// описание одной точки останова в списке  ### ЕСТЬ ИЗМЕНЕНИЯ ### =====================
typedef struct {
	uint64_t	t;		// тип данных (N)
	uint64_t	a;		// адрес точки останова
	uint64_t	o;		// опкод в точке останова
} bp_addr;
// массив (тип А) для списка точек останова
typedef struct {
	uint64_t	l;		// количество записей в массиве (вход - длина, выход - сколько записано)
	bp_addr		bp[128];	// информация о точках останова
} bp_list;

// область памяти
typedef struct {
	uint64_t	t;		// тип данных В (12) - двоичная строка
	uint32_t	l;		// длина данных, 32 бита
	unsigned char	d[4096];	// данные
} data_block;

// Выполнение машинных команд
typedef struct {
	uint64_t	a;		// тип данных - массив из 2х элементов (== 3)
	uint64_t	n1;		// тип первого элемента (N == 1)
	uint64_t	ip;		// значение IP после выполнения команды
	uint64_t	n2;		// тип второго элемента (N == 1)
	uint64_t	n;		// количество выполненных машинных команд
} exec_str;

// код завершения последней выполненной функции диспетчера (кроме функции 21!)
typedef struct {
	long long ercode;
	char* text;		// учитывая паскалевские строки печатать надо начиная с text[1], ноль в конце всегда есть
} dsp_error;

// данные о загруженном ELF-файле ### ЕСТЬ ИЗМЕНЕНИЯ ### ==== ### все поля - 64 бита ###
typedef struct {
	uint64_t	size;		// размер файла
	uint64_t	endian;		// 0-LE, 1-BE
	uint64_t	start;		// адрес _start
	uint64_t	main;		// адрес main
	uint64_t	init;		// адрес init (пока 0, не заполняется)
	uint64_t	fini;		// адрес fini (пока 0, не заполняется)
	uint64_t	gotplt;		// вызов внешних API (0-GOT, 1-PLT)
	uint64_t	dynsyms;	// количество динамических символов
	uint64_t	emuls;		// из них эмулируется (пока 0, в процессе)
	uint64_t	symbols;	// количество символов в symtab
	uint64_t	d_addr;		// адрес таблицы динамических символов, формат элемента в соответствии со структурой ds_table
	uint64_t	s_addr;		// адрес symtab, формат элемента в соответствии со структурой sym_table
} load_elf_str;
// Таблица динамических символов (для Комдив - не используется!)
typedef struct {		// 24 байта
	char*		name;	// адрес имени символа
	uint64_t	value;	// значение
	uint32_t	hash;	// хэш имени
	int		need;	// необходимо подменять?
} ds_table;
// Таблица символов
typedef struct {
	char* 		name;	// адрес имени символа
	uint64_t	value;	// значение
} sym_table;

// Регистры  ### ЕСТЬ ИЗМЕНЕНИЯ ### =====================
typedef struct {
	uint64_t	t;		// тип элемента массива - N - целое число (8 байт)
	uint64_t	v;		// значение элемента массива (32 бита)
} val_str;
// Регистры CP1  ### ЕСТЬ ИЗМЕНЕНИЯ ### =====================
typedef struct {
	float		f;		// 32-битное значение одного регистра (float)
	uint32_t	v;		// старшие 32 бита
} float_reg;
typedef struct {
	uint64_t	t;		// тип элемента массива - тоже N
	union {
		float_reg	f;	// плавающее значение элемента массива (32 бита)
		double		d;	// плавающее значение элемента массива (64 бита)
		uint64_t	i;	// целое значение элемента массива (32 бита)
	} v;
} fval_str;
typedef struct {
	uint64_t	len;		// количество записей о регистрах
	val_str		cpu[35];	// регистры CP0
	fval_str	fpu[32];	// регистры CP1
} reg_str;

